#!/bin/zsh
# Dependencies: cmark, entr, ucspi-tcp

port=9999
sse_port=9998

# Kill all child jobs when we exit.
# https://aweirdimagination.net/2020/06/28/kill-child-jobs-on-script-exit/
cleanup() {
	# https://stackoverflow.com/questions/2618403/how-to-kill-all-subprocesses-of-shell/17615178#comment131341726_26966800
	k() {
		for p in $(pgrep -P $1); do
			k $p
		done
		kill $1 2>/dev/null
	}
	k $$
}

for sig in INT QUIT HUP TERM; do
	trap "
    cleanup
    trap - $sig EXIT
    kill -s $sig "'"$$"' "$sig"
done
trap cleanup EXIT

if [[ -z "$1" ]]; then
	echo "Usage: $0 <markdown-file>"
	exit 1
fi

case "$1" in
__build | __sse | __server)
	mode="$1"
	in="$2"
	base="$3"
	;;
*)
	build=0
	in="$1"
	outdir=$(mktemp -d)
	base="$outdir/$(basename -s .md "$in")"
	;;
esac

prefix="$base.prefix.html"
body="$base.body.html"
out="$base.html"

case "$mode" in
__build)
	#pandoc -f markdown-raw_tex -t html "$in" >"$body" && cat "$prefix" "$body" >"$out"
	cmark "$in" >"$body"
  cat "$prefix" "$body" >"$out"
	echo build
	exit 0
	;;

__sse)
	cat <<EOF
HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Cache-Control: no-cache
Connection: keep-alive
Content-Type: text/event-stream

retry: 1000
EOF

  echo "$out" | entr -p printf "event: change\ndata:\n\n"

	exit 0
	;;

__server)
	cat <<EOF
HTTP/1.1 200 OK
Content-Encoding:
Cache-Control: no-cache
Content-Type: text/html; charset=utf8
Content-Length: $(wc -c <"$out")

EOF

  cat "$out"

  exit 0
  ;;
esac

cat >"$prefix" <<"EOF"
<!DOCTYPE html>
<html>
<head>
<style>
/* Simple base stylesheet from https://fvsch.com/base-stylesheet */

body {
  margin: 0;
  padding: 0;
  font-size: 100%;
  line-height: 1.5;
}
h1,
h2,
h3,
h4 {
  margin: 1em 0 0.5em;
  line-height: 1.25;
}
h1 {
  font-size: 2em;
}
h2 {
  font-size: 1.5em;
}
h3 {
  font-size: 1.2em;
}
ul,
ol {
  margin: 1em 0;
  padding-left: 40px;
  ul,
  ol {
    /* Don't add margin to nested lists. */
    margin: 0;
  }
}
p,
figure {
  margin: 1em 0;
}
a img {
  border: none;
}
sup,
sub {
  line-height: 0;
}

/* End base stylesheet */

body {
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
}
</style>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css" integrity="sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV" crossorigin="anonymous" />
<script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js" integrity="sha384-XjKyOOlGwcjNTAIQHIpgOno0Hl1YQqzUOEleOLALmuqehneUG+vnGctmUb0ZY0l8" crossorigin="anonymous"></script>
<script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js" integrity="sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05" crossorigin="anonymous"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  // HACK: https://github.com/KaTeX/KaTeX/issues/437#issuecomment-1147314526
  document.body.innerHTML = document.body.innerHTML.replace(/\\\$/g, '<span>$</span>');
  renderMathInElement(document.body, {
    delimiters: [
      {left: '$$', right: '$$', display: true},
      {left: '$', right: '$', display: false},
      {left: '\\[', right: '\\]', display: true},
      {left: '\\(', right: '\\)', display: false},
    ],
    supportEscapedSpecialCharsInText: true
  });
});
EOF

cat >>"$prefix" <<EOF
const es = new EventSource('http://127.0.0.1:$sse_port');
es.addEventListener('change', () => {
  location.reload()
});
</script>
</head>
EOF

cat >"$out" <<EOF
Building...
EOF

tcpserver 127.0.0.1 $port "$0" __server "$in" "$base" &
tcpserver -D 127.0.0.1 $sse_port "$0" __sse "$in" "$base" &

#echo "$base"

url="http://127.0.0.1:$port"
open "$url"
echo "Serving at $url"
echo "$1" | entr "$0" __build "$in" "$base"
