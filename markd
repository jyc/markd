#!/bin/zsh
# Dependencies: cmark, entr, ucspi-tcp

port=9999
sse_port=9998

# Kill all child jobs when we exit.
# https://aweirdimagination.net/2020/06/28/kill-child-jobs-on-script-exit/
cleanup() {
	# https://stackoverflow.com/questions/2618403/how-to-kill-all-subprocesses-of-shell/17615178#comment131341726_26966800
	k() {
		for p in $(pgrep -P $1); do
			k $p
		done
		kill $1 2>/dev/null
	}
	k $$
}

for sig in INT QUIT HUP TERM; do
	trap "
    cleanup
    trap - $sig EXIT
    kill -s $sig "'"$$"' "$sig"
done
trap cleanup EXIT

if [[ -z "$1" ]]; then
	echo "Usage: $0 <markdown-file>"
	exit 1
fi

case "$1" in
__build | __sse | __server)
	mode="$1"
	in="$2"
	base="$3"
	;;
*)
	in="$1"
	outdir=$(mktemp -d)
	base="$outdir/$(basename -s .md "$in")"
	;;
esac

prefix="$base.prefix.html"
body="$base.body.html"
out="$base.html"

case "$mode" in
__build)
	#pandoc -f markdown-raw_tex -t html "$in" >"$body" && cat "$prefix" "$body" >"$out"
	cmark "$in" >"$body"
	cat "$prefix" "$body" >"$out"
	echo build
	exit 0
	;;

__sse)
	cat <<EOF
HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Cache-Control: no-cache
Connection: keep-alive
Content-Type: text/event-stream

retry: 1000
EOF

	echo "$out" | entr -p printf "event: change\ndata:\n\n"

	exit 0
	;;

__server)
	cat <<EOF
HTTP/1.1 200 OK
Content-Encoding:
Cache-Control: no-cache
Content-Type: text/html; charset=utf8
Content-Length: $(wc -c <"$out")

EOF

	cat "$out"

	exit 0
	;;
esac

cat >"$prefix" <<"EOF"
<!DOCTYPE html>
<html>
<head>
<style>
body {
  margin: 1em auto;
  padding: 0;
  max-width: 45em;
  font-size: 15px;
  font-family: "Charter", "Times New Roman", "Tinos", "Times", serif;
  line-height: 1.35;
}
h1,
h2,
h3,
h4 {
  margin: 1em 0 0.5em;
  line-height: 1.25;
  font-family: "Fira Sans", "Helvetica", "Arial", sans-serif;
  code {
    font-size: 1em;
  }
}
h1 {
  font-size: 2em;
}
h2 {
  font-size: 1.5em;
}
h3 {
  font-size: 1.2em;
}
ul,
ol {
  margin: 1em 0;
  padding-left: 40px;
  ul,
  ol {
    /* Don't add margin to nested lists. */
    margin: 0;
  }
}
p,
figure {
  margin: 1em 0;
}
a img {
  border: none;
}
sup,
sub {
  line-height: 0;
}

code {
  font-family: "Iosevka", "Iosevka Web", "Courier", "Courier New", monospace;
  font-size: 0.9em;
}

pre:has(> code) {
  line-height: 1.1;
  background-color: rgba(0, 0, 0, 0.0078125) !important;
  color: black;
  padding: 6px;
  border-radius: 4px;
}

*:not(.katex-display) > .katex {
  line-height: 1;
}
</style>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/katex.min.css" integrity="sha384-nB0miv6/jRmo5UMMR1wu3Gz6NLsoTkbqJghGIsx//Rlm+ZU03BU6SQNC66uf4l5+" crossorigin="anonymous">
<script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/katex.min.js" integrity="sha384-7zkQWkzuo3B5mTepMUcHkMB5jZaolc2xDwL6VFqjFALcbeS9Ggm/Yr2r3Dy4lfFg" crossorigin="anonymous"></script>
<script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/contrib/auto-render.min.js" integrity="sha384-43gviWU0YVjaDtb/GhzOouOXtZMP/7XUzwPTstBeZFe/+rCMvRwr4yROQP43s0Xk" crossorigin="anonymous"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // HACK: https://github.com/KaTeX/KaTeX/issues/437#issuecomment-1147314526
  document.body.innerHTML = document.body.innerHTML.replace(/\\\$/g, '<span>$</span>');
  renderMathInElement(document.body, {
    delimiters: [
      {left: '$$', right: '$$', display: true},
      {left: '$', right: '$', display: false},
      {left: '\\[', right: '\\]', display: true},
      {left: '\\(', right: '\\)', display: false},
    ],
    supportEscapedSpecialCharsInText: true
  });

  // ```math
  document.querySelectorAll("pre:has(> code.language-math)").forEach((el) => {
    const tex = el.innerText;
    katex.render(tex, el);
    el.classList.add("katex-display");
  });
});
EOF

cat >>"$prefix" <<EOF
const es = new EventSource('http://127.0.0.1:$sse_port');
es.addEventListener('change', () => {
  location.reload()
});
</script>
</head>
EOF

cat >"$out" <<EOF
Building...
EOF

tcpserver 127.0.0.1 $port "$0" __server "$in" "$base" &
tcpserver -D 127.0.0.1 $sse_port "$0" __sse "$in" "$base" &

#echo "$base"

url="http://127.0.0.1:$port"
#open "$url"
echo "Serving at $url"
echo "$1" | entr "$0" __build "$in" "$base"
